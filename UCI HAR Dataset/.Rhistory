md[,"gdp"]
gdp[,"gdp"]
link1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(link1,destfile="gdp.csv", method="curl")
gdp = read.table("gdp.csv", sep=",",quote="\"",header=FALSE,skip=5,col.names=c("code","num","","country", "gdp","","","","",""))
gdpdf=data.frame(gdp)
gdpdf=gdpdf[which(gdpdf$code!="")] ## consider only those observations that don't have empty-string codes
gdpdf=gdpdf[1:190,] ## remove unnecessary rows
md=mutate(gdpdf, gdp=as.numeric(gsub(",","",gdp))) #convert the comma-separated values of gdp into numerics
gdpdf=as.data.frame(gdp)
gdpdf=gdpdf[which(gdpdf$code!="")] ## consider only those observations that don't have empty-string codes
gdpdf=gdpdf[1:190,] ## remove unnecessary rows
md=mutate(gdpdf, gdp=as.numeric(gsub(",","",gdp))) #convert the comma-separated values of gdp into numerics
gdp
names(gdp)
which(gdpdf$code=="")
which(gdpdf$code!="")
gdp = read.table("gdp.csv", sep=",",quote="\"",header=FALSE,skip=5,col.names=c("code","num","","country", "gdp","","","","",""))
gdpdf=as.data.frame(gdp)
md=mutate(gdpdf, gdp=as.numeric(gsub(",","",gdp))) #convert the comma-separated values of gdp into numerics
mean(md$gdp)
md[,"gdp"]
which(gdpdf$code=="")
gdpdf=gdpdf[which(gdpdf$code!="")] ## consider only those observations that don't have empty-string codes
which(gdpdf$code!="")
which(gdpdf$code=="")
gdpdf[which(gdpdf$code!="")]
gdpdf=gdpdf[which(gdpdf$code!=""),]
gdpdf=gdpdf[1:190,] ## remove unnecessary rows
gdpdf
md=mutate(gdpdf, gdp=as.numeric(gsub(",","",gdp))) #convert the comma-separated values of gdp into numerics
md[,"gdp"]
mean(md[,"gdp"])
md[,"country"]
grep("United", md$country]
grep("United", md$country)
table(grep("United", md$country))
table(grepl("United", md$country))
table(grepl("^United", md$country))
link1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
link2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(link1,destfile="gdp.csv", method="curl")
download.file(link2,destfile="edu.csv", method="curl")
gdp = read.table("gdp.csv", sep=",",quote="\"",header=FALSE,skip=5,col.names=c("code","num","","country", "gdp","","","","",""))
gdpdf =as.data.frame(gdp)
edu = read.table("edu.csv", sep=",",header=TRUE, quote="\"")
edudf = as.data.frame(edu)
gdpdf=gdpdf[which(gdpdf$code!=""),] ## consider only those observations that don't have empty-string codes
gdpdf=gdpdf[1:190,] ## remove unnecessary rows
md=merge(x=gdpdf,y=edudf,by.x="code",by.y="CountryCode")
names(md)
grep("*[Ff]iscal", names(md))
grep("*[Ff]iscal*", names(md))
grep("*[Tt]able*", names(md))
grepl("*[Tt]able*", names(md))
md[,"PPP.survey.year"]
md[,"National.accounts.base.year"]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
length(grep("2012-*", sampleTimes))
weekdays(sampleTimes[1])
weekdays(sampleTimes[2047])
sampleTimes[which(grep("2012-*", sampleTimes))]
sampleTimes[which(grepl("2012-*", sampleTimes))]
weekdays(sampleTimes[which(grepl("2012-*", sampleTimes))])
length(weekdays(sampleTimes[which(grepl("2012-*", sampleTimes))]))
which(weekdays(sampleTimes[which(grepl("2012-*", sampleTimes)])) == "Monday")
which(weekdays(sampleTimes[which(grepl("2012-*", sampleTimes))]) == "Monday")
length(which(weekdays(sampleTimes[which(grepl("2012-*", sampleTimes))]) == "Monday"))
install.packages(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv,stringAsFactors=FALSE)
path2csv
mydf=read.csv(path2csv,stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
print(tbl_df)
print(cran)
print("cran")
print(cran)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -(r_arch:country)
)
select(cran, -r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country=="IN", version>="3.0.2")
filter(cran, country=="IN", version<="3.0.2")
filter(cran, country=="IN", r_version<="3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id
)
arrange(cran2, country, desc(r_version), ip_id)
cran3=select(cran, ip_id, package, size)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size*1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
bye()
dirHomework<-"/Users/albanag/coursera/datasciencecoursera/getdata/course_assignment/UCI\ HAR\ Dataset"
if (!file.exists(dirHomework)) {
dir.create(dirHomework)
}
getwd()
setwd(dirHomework)
getwd()
setwd(paste(dirHomework, "/test"))
testdir = paste(dirHomework, "/test")
testdir
testdir = paste0(dirHomework, "/test")
testdir
setwd(testdir)
getwd()
?fread
?read.table
test_tab = read.table("X_test.txt", header=FALSE, sep=" ")
test_tab = read.table("y_test.txt", header=FALSE, sep=" ")
dim(test_tab)
test_tab = read.table("X_test.txt", header=FALSE, sep=" ", skip=3)
test_tab = read.table("X_test.txt", header=FALSE, sep=" ", skip=13)
test_tab = read.table("X_test.txt", header=FALSE, sep=" ", skip=130)
test_tab = read.table("X_test.txt", header=FALSE, sep=" ", skip=1)
test_subj_tab = read.table("subject_test.txt", header=FALSE, sep=" ")
test_tab = read.table("X_test.txt", header=FALSE, sep=" ", skip=1)
test_subj_tab
test_tab
test_activity_tab = read.table("y_test.txt", header=FALSE, sep=" ")
test_activity_tab
test_tab = readcsv("X_test.txt", header=FALSE, sep=" ")
?read.csv
test_tab = read.csv("X_test.txt", header=FALSE, sep=" ")
test_tab
dim(test_tab)
head(test_tab)
test_tab = read.csv("X_test.txt", header=FALSE, sep="")
dim(test_tab)
head(test_tab)
colSums(is.na(test_tab))
## read train data
test_activity_tab = read.table("y_test.txt", header=FALSE, sep="")
dim(test_activity_tab)
test_tab = read.csv("X_test.txt", header=FALSE, sep="")
dim(test_tab)
## 1. Merges the training and the test sets to create one data set.
test_subj_tab = read.table("subject_test.txt", header=FALSE, sep="")
dim(test_subj_tab)
test_tab = read.table("X_test.txt", header=FALSE, sep="")
dim(test_tab)
setwd(dirHomework)
test_activity_tab = read.table("test/y_test.txt", header=FALSE, sep="")
dim(test_activity_tab)
dirHomework<-"/Users/albanag/coursera/datasciencecoursera/getdata/course_assignment/UCI\ HAR\ Dataset"
if (!file.exists(dirHomework)) {
dir.create(dirHomework)
}
setwd(dirHomework)
getwd()
## read features list
features = read.table("features.txt", header=FALSE, sep="")
dim(features)
## read test data
test_activity_tab = read.table("test/y_test.txt", header=FALSE, sep="")
dim(test_activity_tab)
test_tab = read.table("test/X_test.txt", header=FALSE, sep="")
dim(test_tab)
test_subj_tab = read.table("/test/subject_test.txt", header=FALSE, sep="")
dim(test_subj_tab)
## read train data
train_activity_tab = read.table("train/y_train.txt", header=FALSE, sep="")
dim(train_activity_tab)
train_tab = read.table("train/X_train.txt", header=FALSE, sep="")
dim(train_tab)
train_subj_tab = read.table("train/subject_train.txt", header=FALSE, sep="")
dim(train_subj_tab)
test_subj_tab = read.table("test/subject_test.txt", header=FALSE, sep="")
dim(test_subj_tab)
?rbind
rbind(1:4, c = 2, "a++" = 10)
rbind(1:4, 2:6)
rbind(1:4, 2:5)
subj = rbind(test_subj_tab, train_subj_tab)
dim(subj)
activity = rbing(test_activity_tab, train_activity_tab)
dim(activity)
tab = rbind(test_tab, train_tab)
dim(tab)
activity = rbind(test_activity_tab, train_activity_tab)
dim(activity)
head(features)
grep( "*mean\(\)*", "asdfmean()")
grep( "*mean()*", "asdfmean()")
grepl( "*mean()*", "asdfmean()")
which(grepl( "*mean()*", "asdfmean()"), features$V2)
which(grepl( "*mean()*", features$V2))
head(tab)
which(grepl( "*mean()*|*std()*", features$V2))
?select
?sapply
select(tab, 1,2,3)
head(select(tab, 1,2,3))
head(tab)
head(select(tab, indexes))
indexes = which(grepl( "*mean()*|*std()*", features$V2))
head(select(tab, indexes))
?rename
subtab = select(tab, indexes)
names(subtab) = indexes
head(subtab)
names = features[which(grepl( "*mean()*|*std()*", features$V2)),]
head(names)
head(names, n=12)
names = features[which(grepl( "*mean()*|*std()*", features$V2))$V2,]
names = features[which(grepl( "*mean()*|*std()*", features$V2)),][1]
head(names, n=12)
names = features[which(grepl( "*mean()*|*std()*", features$V2)),][2]
head(names, n=12)
names(subtab) = names
head(subtab)
desc = features[which(grepl( "*mean()*|*std()*", features$V2)),][2]
head(desc)
names(subtab) = desc$V2
head(subtab)
head(activity)
?mutate
mutate(activity, V2= if(V1==5) then 4)
mutate(activity, V2= if(V1==5) { print 4})
mutate(activity, V2<- if(V1==5) { print 4})
activity$new= ifelse(activity$V1 == 5, "aa", "bb")
head(activity)
tail(activity)
activity_labels = read.table("activity_labels.txt", header=FALSE, sep="")
activity_labels
?merge
complete_activity = merge(activity, activity_labels, by="V1")
head(complete_activity,n=24)
complete_activity$new <- NULL
head(complete_activity,n=24)
head(complete_activity,n=240)
dim(complete_activity)
filter(complete_activity, V1=3)
filter(complete_activity, V1==3)
length(filter(complete_activity, V1==3))
filter(complete_activity, V1==4)
filter(complete_activity, V1==5)
dim(complete_activity)
dim(subtab)
head(subj)
tail(subj)
filter(subj, V1==1)
rownum
?numrow
tail(subj)
subtab2= merge(subj, subtab, by="row.names")
head(subtab2)
head(subj)
head(subtab2)
?base::row
row(activity)
head(row(activity))
?merge
subtab2= cbind(subj, subtab)
head(subtab2)
subtab3= cbind(complete_activity, subtab2)
head(subtab3)
head(complete_activity)
names(complete_activity) = c("ActivityCode", "ActivityDescription")
head(complete_activity)
head(subj)
names(subj) = c("SubjectID")
head(subj)
subtab2= cbind(subj, subtab)
subtab3= cbind(complete_activity, subtab2)
head(subtab3)
subtab2 = cbind(subj, complete_activity, subtab)
head(subtab2)
group_by(completetab, SubjectID)
group_by(complete_tab, SubjectID)
complete_tab = cbind(subj, complete_activity, subtab)
group_by(complete_tab, SubjectID)
group_by(complete_tab, SubjectID, ActivityCode)
summarize(group_by(complete_tab, SubjectID, ActivityCode), mean(4:10))
summarize(group_by(complete_tab, SubjectID, ActivityCode))
head(summarize(group_by(complete_tab, SubjectID, ActivityCode)),n=35)
?summarize
head(summarize(group_by(complete_tab, SubjectID, ActivityCode), mean),n=35)
ddply(complete_tab, .(SubjectID,ActivityCode), summarize)
require(plyr)
ddply(complete_tab, .(SubjectID,ActivityCode), summarize)
names(complete_tab)
summarize(group_by(complete_tab, SubjectID, ActivityCode), mean)
summarize(group_by(complete_tab, SubjectID, ActivityCode), mean())
summarize(group_by(complete_tab, SubjectID, ActivityCode))
complete_tab
summarize(group_by(complete_tab, SubjectID, ActivityCode),)
summarize(group_by(complete_tab, SubjectID, ActivityCode))
head(summarize(group_by(complete_tab, SubjectID, ActivityCode)),n=35)
head(summarize(group_by(complete_tab, SubjectID, ActivityCode)),colMeans)
detach(package:plyr)
head(summarize(group_by(complete_tab, SubjectID, ActivityCode)),colMeans)
head(summarize(group_by(complete_tab, SubjectID, ActivityCode)))
group_by(complete_tab, SubjectID, ActivityCode)
summarize(gg,colMeans)
gg<- group_by(complete_tab, SubjectID, ActivityCode)
summarize(gg,colMeans)
colMeans(gg)
colMeans(gg[,5])
gg
summarize(gg, colMeans)
summarize(gg)
summarize(gg, colMeans(select(gg, 5:10)))
select(gg, 5:10)
colMeans(select(gg, 5:10))
hh=colMeans(select(gg, 5:10))
hh
summarize(gg)
?dcast
??dcast
gg
head(gg)
tappy(gg,mean)
tapply(gg,mean)
sapply(gg,mean)
sapply(gg,4:, mean)
sapply(gg,4:10, mean)
apply(gg,4:10, mean)
apply(gg,5:8, mean)
head(complete_tab)
tapply(complete_tab$SubjectID, complete_tab$ActivityCode, mean)
tapply(complete_tab,complete_tab$SubjectID, complete_tab$ActivityCode, mean)
ddply(complete_tab, .(SubjectID,ActivityCode), summarize, mean)
library(plyr)
?ddply
ddply(complete_tab, .(SubjectID,ActivityCode), summarize, mean)
?summarize
?dcast
??dcast
library(reshape2)
?dcast
tmp<-melt(complete_tab, id.vars=c("SubjectID", "ActivityCode","ActivityDesc"))
tmp<-melt(complete_tab, id.vars=c("SubjectID", "ActivityCode","ActivityDescription"))
tmp
head(tmp)
tmp2=group_by(tmp, SubjectID, ActivityCode)
tmp3=summarize(tmp2, meanVal=mean(value))
head(tmp3)
tmp2
summarize(tmp2)
summarize(tmp2,mean)
library(dplyr)
tmp3=summarize(tmp2, meanVal=mean(value))
tmp3
tmp3=summarise(tmp2, meanVal=mean(value))
tmp3
head(tmp2)
ttt=tapply(tmp2$SubjectID, tmp2$ActivityCode, mean(tmp2$value))
ttt=tapply(tmp2$SubjectID, tmp2$ActivityCode)
head(ttt)
ttt=tapply(tmp2$SubjectID, tmp2$ActivityCode,mean)
head(ttt)
tidy= group_by(tmp, SubjectID, ActivityCode) %>% summarize(meanVal=mean(value))
tidy
tidy= group_by(tmp, SubjectID) %>% summarize(meanVal=mean(value))
tidy
?group_by
detach(package:plyr)
tmp<-melt(complete_tab, id.vars=c("SubjectID", "ActivityCode","ActivityDesc"))
tidy= group_by(tmp, SubjectID,ActivityCode) %>% summarise(mean(value))
tmp<-melt(complete_tab, id.vars=c("SubjectID", "ActivityCode","ActivityDescription"))
tidy= group_by(tmp, SubjectID,ActivityCode) %>% summarise(mean(value))
tidy
tidy= group_by(tmp, SubjectID,ActivityCode) %>% summarise(variable, mean(value))
tidy= group_by(tmp, SubjectID,ActivityCode) %>% summarise(variable=variable, meanVal=mean(value))
tidy= group_by(tmp, SubjectID,ActivityCode) %>% summarise(meanVal=mean(value))
tidy
view(tidy)
head(tmp)
?melt
tmp<-melt(complete_tab, id.vars=c("SubjectID", "ActivityCode","ActivityDescription"), variable.name="var")
head(tmp)
tmp<-melt(complete_tab, id.vars=c("SubjectID", "ActivityCode","ActivityDescription"), variable.name="Measurement")
head(tmp)
tmp2 = group_by(tmp, SubjectID,ActivityCode)
head(tmp2)
tmp3=summarise(tmp2, meanVal=mean(value))
head(tmp3)
?summarise
tmp2 = group_by(tmp, SubjectID,ActivityCode, ActivityDescription,Measurement)
tmp3=summarise(tmp2, meanVal=mean(value))
head(tmp3)
head(tmp3, n=40)
tmp3
grepl( "*mean()*|*std()*", "meanFa()")
grepl( "*mean\\(\\)*|*std()*", "meanFa()")
grepl( "*mean\\(\\)*|*std()*", "mean()")
test_activity_tab = read.table("test/y_test.txt", header=FALSE, sep="")
dirHomework<-"/Users/albanag/coursera/datasciencecoursera/getdata/course_assignment/UCI\ HAR\ Dataset"
if (!file.exists(dirHomework)) {
dir.create(dirHomework)
}
setwd(dirHomework)
getwd()
## read features list
features = read.table("features.txt", header=FALSE, sep="")
dim(features)
activity_labels = read.table("activity_labels.txt", header=FALSE, sep="")
activity_labels
## read test data
test_activity_tab = read.table("test/y_test.txt", header=FALSE, sep="")
dim(test_activity_tab)
test_tab = read.table("test/X_test.txt", header=FALSE, sep="")
dim(test_tab)
test_subj_tab = read.table("test/subject_test.txt", header=FALSE, sep="")
dim(test_subj_tab)
## read train data
train_activity_tab = read.table("train/y_train.txt", header=FALSE, sep="")
dim(train_activity_tab)
train_tab = read.table("train/X_train.txt", header=FALSE, sep="")
dim(train_tab)
train_subj_tab = read.table("train/subject_train.txt", header=FALSE, sep="")
dim(train_subj_tab)
## 1. Merges the training and the test sets to create one data set.
subj = rbind(test_subj_tab, train_subj_tab)
activity = rbind(test_activity_tab, train_activity_tab)
tab = rbind(test_tab, train_tab)
# dim(subj)
# dim(activity)
# dim(tab)
## 2. Extracts only the measurements on the mean and standard deviation for each measurement.
indexes = which(grepl( "*mean\\(\\)*|*std\\(\\)*", features$V2))
descriptions = features[which(grepl( "*mean\\(\\)*|*std\\(\\)*", features$V2)),][2]
subtab = select(tab, indexes)
## 3. Uses descriptive activity names to name the activities in the data set
# join activity_labels with the activity table to assign a label to each activity code
complete_activity = merge(activity, activity_labels, by="V1")
names(complete_activity) = c("ActivityCode", "ActivityDescription")
## 4. Appropriately labels the data set with descriptive variable names.
names(subtab) = descriptions$V2
## 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# name the subject table
names(subj) = c("SubjectID")
# add tables subject and activity to the dataset
complete_tab = cbind(subj, complete_activity, subtab)
# reshape
reshaped<-melt(complete_tab, id.vars=c("SubjectID", "ActivityCode","ActivityDescription"), variable.name="Measurement")
grouped = group_by(reshaped, SubjectID, ActivityCode, ActivityDescription, Measurement)
final = summarise(grouped, meanVal=mean(value))
print final
print(final)
?write.table
write.table(final, file="tidy_data.txt", row.names=FALSE)
write.table(final, file="tidy_data.txt", row.name=FALSE)
set.seed(1)
rpois(5, 2)
?rnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
?rnorm
x
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
?rpois
?lm
Rprof()
?Rprof
Rprof(NULL)
Rprof()
x <- rep(0:1, each = 5)
summaryRprof()
Rprof(NULL)
